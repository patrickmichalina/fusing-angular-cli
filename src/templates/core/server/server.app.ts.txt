import * as express from 'express'
import * as cookieParser from 'cookie-parser'
import * as lru from 'lru-cache'
import { resolve } from 'path'
import { ngExpressEngine } from '@nguniversal/express-engine'
import { AppServerModule } from './server.angular.module'
import { stat, createReadStream } from 'fs'
import { LRU_CACHE } from 'fusing-angular-cli/.build/modules/src/modules/firebase'
const ms = require('ms')

const environment = JSON.parse(process.env.FUSING_ANGULAR || '{}')
const isLocalDevelopmentServer = environment.ENV === 'dev'
const LRU = new lru({
  max: 500,
  maxAge: 1000 * 30
})

// const xhr2 = require('xhr2')
// tslint:disable-next-line:no-object-mutation
// xhr2.prototype._restrictedHeaders.cookie = false

const base = ''
const expressApp = express()
const dir = resolve(base, '.dist')
const publicDir = `${dir}/public`

require('reload')(expressApp)

function seconds(time: string) {
  return ms(time) / 1000
}

function staticCacheOptionsGen(time: string, disableCacheForLocalDev = true) {
  return {
    index: false,
    setHeaders: (res: express.Response) => {
      res.setHeader(
        'Expires',
        disableCacheForLocalDev
          ? new Date(Date.now() + seconds(time)).toUTCString()
          : new Date(Date.now()).toUTCString()
      )
      res.setHeader(
        'Cache-Control',
        disableCacheForLocalDev ? 'max-age=0' : `max-age=${seconds(time)}`
      )
    }
  }
}

expressApp.use(cookieParser())

expressApp.set('x-powered-by', false)
expressApp.set('etag', false)
expressApp.set('view engine', 'html')
expressApp.set('views', publicDir)

expressApp.engine('html', ngExpressEngine({
  bootstrap: AppServerModule,
  providers: [
    {
      provide: LRU_CACHE, useValue: LRU
    }
  ]
}))

function returnBrEncoding(availableEncodings: string[]) {
  return availableEncodings.some(a => a === 'br')
}

function returnGzipEncoding(availableEncodings: string[]) {
  return availableEncodings.some(a => a === 'gzip')
}

function writeJsHeaders(res: express.Response, contentLength: number, type: string) {
  res.writeHead(200, {
    "Content-Type": "application/javascript",
    "Content-Encoding": type,
    "Content-Length": contentLength,
    "Cache-Control": isLocalDevelopmentServer
      ? "public, no-cache"
      : `public, max-age=${seconds('180d')}, s-maxage=${seconds('180d')}`
  })
}

function checkReturnJsFile(filePath: string, res: express.Response, encoding: string, append = true) {
  const path = append
    ? `${filePath}.${encoding}`
    : filePath
  stat(path, (err, stats) => {
    if (err) {
      res.writeHead(404)
      res.end()
    } else {
      writeJsHeaders(res, stats.size, encoding)
      createReadStream(path).pipe(res)
    }
  })
}

expressApp.use('/robots.txt', express.static(`${publicDir}/assets/robots.txt`, staticCacheOptionsGen('30d')))
expressApp.use('/assets', express.static(`${publicDir}/assets`, staticCacheOptionsGen('30d')))
expressApp.use('/favicon.ico', express.static(`${publicDir}/assets/favicons/favicon.ico`, staticCacheOptionsGen('30d')))
expressApp.use('/manifest.json', express.static(`${publicDir}/assets/favicons/manifest.json`, staticCacheOptionsGen('30d')))
expressApp.use('/js/ngsw.json', express.static(`${publicDir}/ngsw.json`, staticCacheOptionsGen('30d')))

expressApp.get('/js/**', (req, res) => {
  const encodings = (req.get('Accept-Encoding') || '').split(',').map(a => a.trim())
  const filePath = resolve(`${publicDir}${req.path}`)

  if (isLocalDevelopmentServer) {
    checkReturnJsFile(filePath, res, 'identity', false)
  } else if (returnBrEncoding(encodings)) {
    checkReturnJsFile(filePath, res, 'br')
  } else if (returnGzipEncoding(encodings)) {
    checkReturnJsFile(filePath, res, 'gzip')
  } else {
    checkReturnJsFile(filePath, res, 'identity', false)
  }
})

expressApp.get('**', (req, res) => {
  return res.render('index', {
    req,
    res
  })
})

export { expressApp }