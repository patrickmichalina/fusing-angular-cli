import * as express from 'express'
import * as cookieParser from 'cookie-parser'
import { resolve } from 'path'
import { ngExpressEngine } from '@nguniversal/express-engine'
import { AppServerModule } from './server.angular.module'
import { stat, createReadStream } from 'fs'

const environment = JSON.parse(process.env.FUSING_ANGULAR || '{}')
const isLocalDevelopmentServer = environment.ENV === 'dev'

// const xhr2 = require('xhr2')

// tslint:disable-next-line:no-object-mutation
// xhr2.prototype._restrictedHeaders.cookie = false

const base = ''
const expressApp = express()
const dir = resolve(base, '.dist')
const publicDir = `${dir}/public`

isLocalDevelopmentServer && require('reload')(expressApp)

expressApp.use(cookieParser())

expressApp.set('x-powered-by', false)
expressApp.set('etag', false)
expressApp.set('view engine', 'html')
expressApp.set('views', publicDir)

expressApp.engine('html', ngExpressEngine({ bootstrap: AppServerModule }))

expressApp.use('/favicon.ico', (req, res) => res.sendStatus(204)) // TODO: FAVICONS

function returnBrEncoding(availableEncodings: string[]) {
  return availableEncodings.some(a => a === 'br')
}

function returnGzipEncoding(availableEncodings: string[]) {
  return availableEncodings.some(a => a === 'gzip')
}

function writeJsHeaders(res: express.Response, contentLength: number, type: string) {
  res.writeHead(200, {
    "Content-Type": "application/javascript",
    "Content-Encoding": type,
    "Content-Length": contentLength
  })
}

function checkReturnJsFile(filePath: string, res: express.Response, encoding: string, append = true) {
  const path = append
    ? `${filePath}.${encoding}`
    : filePath
  stat(path, (err, stats) => {
    if (err) {
      res.writeHead(404)
      res.end()
    } else {
      writeJsHeaders(res, stats.size, encoding)
      createReadStream(path).pipe(res)
    }
  })
}

expressApp.get('/js**', (req, res) => {
  const encodings = (req.get('Accept-Encoding') || '').split(',').map(a => a.trim())
  const filePath = resolve(`${publicDir}${req.path}`)

  if (isLocalDevelopmentServer) {
    checkReturnJsFile(filePath, res, 'identity', false)
  } else if (returnBrEncoding(encodings)) {
    checkReturnJsFile(filePath, res, 'br')
  } else if (returnGzipEncoding(encodings)) {
    checkReturnJsFile(filePath, res, 'gzip')
  } else {
    checkReturnJsFile(filePath, res, 'identity', false)
  }
})

expressApp.get('**', (req, res) => {
  return res.render('index', {
    req,
    res
  })
})

// app.use('/ngsw.json', express.static(`${dir}/ngsw.json`, staticOptions))
// app.use(
//   '/ngsw-worker.js',
//   express.static(`${dir}/ngsw-worker.js`, staticOptions)
// )
// app.use(
//   '/assets',
//   express.static(`${dir}/assets`, { ...staticOptions, fallthrough: false })
// )
// app.use(
//   '/manifest.json',
//   express.static(`${dir}/assets`, { ...staticOptions, fallthrough: false })
// )

// app.use('/robots.txt', express.static(`${dir}/web/robots.txt`, staticOptions))
// app.use('/ping.html', express.static(`${dir}/web/ping.html`, staticOptions))
// app.use(
//   '/favicon.ico',
//   express.static(`${dir}/assets/favicons/favicon-16x16.png`, {
//     ...staticOptions,
//     fallthrough: false
//   })
// )
// app.use(
//   '/assets/favicons/favicon.ico',
//   express.static(`${dir}/assets/favicons/favicon-16x16.png`, {
//     ...staticOptions,
//     fallthrough: false
//   })
// )

export { expressApp }